.bash_profile - logins only - This is for control alt f3 or other f#’s
bash profile will check your bashrc as well
.bashrc - non login shells
     -Run bash when making changes to the bashrc you dont need to do SOURCE ./bin/bash
     -calls global bash rc

History can ignore dups and you can do ignore spaces so if you ran ls with a SPACE at the beginning it wont save that command which is cool

.bash_logout 
Doest always exist but its called on user log out
You can create it and it will do something that you decide on user logout

You dont have to have a .sh to run a shell script apparently

Donbt forget you can set env vars and call them in scripts (just remember to export it like so:
VAR=”/bin/bash/something”
export VAR

Or in a sh script
VAR=”/bin/bash/something”
if its a command
export PATH=$PATH:VAR
if its not 
export VAR

env command will show all of the env variables that you can use for scripts including those you have created on your own

If you dont export the env var you create in scripts it will cause the var to be a temporary var that only works inside that script which is REALLY COOL

backticks inside bash will change the env to a command or the results of that command

DATETODAY = backtickdatebacktick

# comment just like in python super chill

No group comment out like python as well

command line substitution - making env vars that run commands like VAR = `date` that is all that it does 

substitution is also the use of alias’s
 when using alias’s within a script you will need to use the command inside the script:
shopt -s expand_aliases

man shopt for more info overrides defualts for the bash env

STATUS of commands
value of 0 or nonzero value - errors

echo $? - asks what the last status of a command was.

This can be used in a shell script as well for error handling

expr 1 +5 - this is math in bash but is MUCH MORE COMPLICATED
expr can act on env vars as well
for example 
NUMBER=5
#I got an error on Number = 5 SPACE SENSITIVE.
echo The number plus 4 is equal to `expr + 4`
when using (‘s in expr you must use the escape character as well as with *’s

set -e - the moment you recieve an error exit the script

printenv AND env- show the environment vars that are in the system - shows global and local on the system

set - SHOWS LOCAL ENV

/dev/null - This is used to avoid output to stdout. Often used in cron jobs

script.sh >> /dev/null

So just a realization just clicked 
variables in bash are actually local env vars

read VARNAME is how you accept user input from the user
before the read command you will often see an echo before the read so that the user knows that the promt wants something

Similar to python print(f”Hi there my name is {firstname}”) 
you can do the same in bash by doing this:
echo “Hi there my name is $FIRSTNAME”
Or this
echo Hi there my name is $FIRSTNAME
 
What is the point of qoutes then in echos? probably user input validation but that isnt enough to fix that of course. But it is a start.

SHELL EXPANSION
Take short cuts in typing by printing all possible values…

For example 
echo sh{ot,ort,oot}

echo st{il,al}l

expansion can also be used with regex
echo “${!HO*}
show all vars that begin wiht HO

You can do strange things with expansion such as 
echo “${VARNAME:=valuesomething}”
That will set the env and print it

Expansion isnt always with the {}’s its also used with [ ] like so
echo “$[ 2 * 2 ]”
And notice that we didnt have to escape the * this time as its using the [ ]’s

Parenthesis arent really needed in the above examples



USER VALIDATION

in bash you can declare vars without specifying the type and it will auto detect the type for us. But to secure our code when using user input its best to use validation

You can check the type of a variable with the:
declare -p VARNAME
command. 

To do input validation do: 
declare -i NEWVAR=10

once a variable is assigned an INT type it it can be overwritten by a string but it will show zero as a result. SO for example:
declare -i NEWVAR=10
NEWVAR=”a string”
echo NEWVAR
0
The zero above is what will happen if you try to change the variable from an int to a string without running
declare +i NEWVAR=”Some string”
The -i will make an interger the +i will remove the integer from a variable in bash!


DECLARING READONLY variables
declare -r READONLY=”This is a string you cannot write to”

you can do the same with
readonly MYREADONLY=”A STRING”

ARRAYS in bash
MYARRAY=(“first” “second” “third”)

(in python an array and list are 2 different things)
mylist = {‘1’,’2’,’3’,’4’,’5’}

So coders often just dont remember the syntax! But they still declare that they know the language which is insane!

Its hard to even imagine that you just say yea I am proficient with that code.
And then the employer is like ok code it! and your like well here is what I remember :p

But that is why data structures and coding theory is important to memorize which is the math behind the code. Which essentially will guide you in building your applications.

Anyway back to bash

echo ${MYARRAY[0]} #This will print the first value of the array

To add to an array outside of a loop you can do:
MYARRAY[3]=”Fourth”

 FOR LOOP with array

SERVERLIST=(“websrv01” “websrv02” “websrv03” “websrv04”)
COUNT=0

for INDEX in $(SERVERLIST[@]); do # The @ sign will loop until the end of the array
 echo “Processing Server: ${SERVERLIST[COUNT]}”
COUNT=”`expr $COUNT + 1`”
done




 


